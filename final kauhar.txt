using System;

public class Complex
{
    public double Real { get; }
    public double Imaginary { get; }

    public Complex(double real, double imaginary)
    {
        Real = real;
        Imaginary = imaginary;
    }

    public static Complex operator +(Complex a, Complex b) =>
        new Complex(a.Real + b.Real, a.Imaginary + b.Imaginary);

    public static Complex operator -(Complex a, Complex b) =>
        new Complex(a.Real - b.Real, a.Imaginary - b.Imaginary);

    public static Complex operator *(Complex a, Complex b) =>
        new Complex(a.Real * b.Real - a.Imaginary * b.Imaginary,
                    a.Real * b.Imaginary + a.Imaginary * b.Real);

    public static Complex operator /(Complex a, Complex b)
    {
        double denominator = b.Real * b.Real + b.Imaginary * b.Imaginary;
        return new Complex(
            (a.Real * b.Real + a.Imaginary * b.Imaginary) / denominator,
            (a.Imaginary * b.Real - a.Real * b.Imaginary) / denominator
        );
    }

    public override string ToString() =>
        $"{Real} {(Imaginary >= 0 ? "+" : "-")} {Math.Abs(Imaginary)}i";
}
2
using System;

public class Complex
{
    public double Real { get; }
    public double Imaginary { get; }

    public Complex(double real, double imaginary)
    {
        Real = real;
        Imaginary = imaginary;
    }

    public static Complex operator +(Complex a, Complex b) =>
        new Complex(a.Real + b.Real, a.Imaginary + b.Imaginary);

    public static Complex operator -(Complex a, Complex b) =>
        new Complex(a.Real - b.Real, a.Imaginary - b.Imaginary);

    public static Complex operator *(Complex a, Complex b) =>
        new Complex(a.Real * b.Real - a.Imaginary * b.Imaginary,
                    a.Real * b.Imaginary + a.Imaginary * b.Real);

    public static Complex operator /(Complex a, Complex b)
    {
        double denominator = b.Real * b.Real + b.Imaginary * b.Imaginary;
        return new Complex(
            (a.Real * b.Real + a.Imaginary * b.Imaginary) / denominator,
            (a.Imaginary * b.Real - a.Real * b.Imaginary) / denominator
        );
    }

    public override string ToString() =>
        $"{Real} {(Imaginary >= 0 ? "+" : "-")} {Math.Abs(Imaginary)}i";
}
3
using System;
public interface IPolynomialEquation
{
    int Dimension { get; }
    double[] Coefficients { get; }
    Complex[] FindRoots();
}
public static class Equations
{
    public static IRootFindingStrategy ChooseStrategy(double[] coefficients) =>
        coefficients.Length switch
        {
            0 => throw new InvalidOperationException("Equation has no coefficients."),
            1 => new LinearEquationRootFindingStrategy(),
            2 => new QuadraticEquationRootFindingStrategy(),
            _ => throw new InvalidOperationException("Equation type is not supported."),
        };
}
public interface IRootFindingStrategy
{
    Complex[] FindRoots(double[] coefficients);
}
public class LinearEquationRootFindingStrategy : IRootFindingStrategy
{
    public Complex[] FindRoots(double[] coefficients)
    {
        double a = coefficients[0];
        if (a == 0)
            throw new InvalidOperationException("Infinite number of roots.");
        return new Complex[] { new Complex(-coefficients[1] / a) };
    }
}
public class QuadraticEquationRootFindingStrategy : IRootFindingStrategy
{
    public Complex[] FindRoots(double[] coefficients)
    {
        double a = coefficients[0];
        double b = coefficients[1];
        double c = coefficients[2];
        double discriminant = b * b - 4 * a * c;
        if (discriminant < 0)
            throw new InvalidOperationException("No real roots.");
        double sqrtDiscriminant = Math.Sqrt(discriminant);
        double root1 = (-b + sqrtDiscriminant) / (2 * a);
        double root2 = (-b - sqrtDiscriminant) / (2 * a);
        return new Complex[] { new Complex(root1), new Complex(root2) };
    }
}
4
using System;

public static void Main(string[] args)
{
    try
    {

        Console.WriteLine("Введите количество коэффициентов уравнения (1 или 2):");
        int dimension = int.Parse(Console.ReadLine());

        double[] coefficients = new double[dimension];

        for (int i = 0; i < dimension; i++)
        {
            while (true)
            {
                Console.WriteLine($"Введите коэффициент {i + 1}:");
                string input = Console.ReadLine();
                if (double.TryParse(input, out coefficients[i]))
                {
                    break;
                }
                else
                {
                    Console.WriteLine("Некорректный ввод. Пожалуйста, введите число.");
                }
            }
        }

        IPolynomialEquation equation = dimension == 1 ?
            new LinearEquation(coefficients) as IPolynomialEquation :
            new QuadraticEquation(coefficients) as IPolynomialEquation;
        Complex[] roots = equation.FindRoots();

        Console.WriteLine("Корни уравнения:");
        foreach (Complex root in roots)
        {
            Console.WriteLine(root);
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine("Ошибка: " + ex.Message);
    }
}